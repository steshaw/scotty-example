version: 2
jobs:
  build:
    docker:
      - image: fpco/stack-build:lts-8.5
    working_directory: /app
    environment:
      CLOUDSDK_CORE_DISABLE_PROMPTS: 1
      # This is not nice. Just want to prepend /opt/google-cloud-sdk/bin to $PATH
      # but this isn't support in CircleCI 2.0 at the moment.
      # This should be built into the base build image anyhow.
      PATH: /opt/google-cloud-sdk/bin:/root/.cabal/bin:/root/.local/bin:/opt/ghc/8.0.2/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    steps:
      - run:
          name: Environment Variables
          command: |
            echo "Hello CircleCI 2.0"
            echo "CIRCLE_BUILD_NUM = ${CIRCLE_BUILD_NUM} (empty for local builds)"
            echo "CIRCLE_BRANCH = ${CIRCLE_BRANCH}"
            echo "CIRCLE_PULL_REQUEST = ${CIRCLE_PULL_REQUEST}"
            circlePullRequestId=${CIRCLE_PULL_REQUEST##*/}
            echo "circlePullRequestId = ${circlePullRequestId}"
            echo "CIRCLE_TAG = ${CIRCLE_TAG}"

      - run:
          name: CPU info
          command: cat /proc/cpuinfo

      - checkout

      - run:
          name: Print num processors (according to GHC)
          command: |
            stack upgrade
            scripts/get-num-processors
            echo "nproc = $(nproc)"
            echo "sysconf:"
            (cd sysconf && gcc -Wall -o sysconf sysconf.c)
            sysconf/sysconf
            echo "_NPROCESSORS_CONF = $(getconf _NPROCESSORS_CONF)"
            echo "_NPROCESSORS_ONLN = $(getconf _NPROCESSORS_ONLN)"
            scripts/build-sysconfcpus
            sysconfcpus --num 1 scripts/get-num-processors

#      - restore_cache:
#          key: stack

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 32
          command: |
            stack build --jobs 32

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 16
          command: |
            stack build --jobs 16

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 8
          command: |
            stack build --jobs 8

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 4
          command: |
            stack build --jobs 4

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 2
          command: |
            stack build --jobs 2

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build 1
          command: |
            stack build --jobs 1

      - run:
          name: clean + stack setup
          command: |
            scripts/clean
            echo PATH=$PATH
            which stack
            stack --version
            stack setup

      - run:
          name: Build (default jobs)
          command: |
            stack build

      - save_cache:
          key: stack-{{ .BuildNum }}
          paths:
            - ~/.stack
            - .stack-work

      - setup_remote_docker

      - run:
          name: Install Docker client
          command: |
            curl -fsSLO https://get.docker.com/builds/Linux/x86_64/docker-17.04.0-ce.tgz && tar --strip-components=1 -xvzf docker-17.04.0-ce.tgz -C /usr/local/bin
            ls

      - run:
          name: Build docker image
          command: |
            stack image container
            docker tag steshaw/scotty-example steshaw/scotty-example:${CIRCLE_SHA1}

      - run:
          name: Push image to Docker Hub
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker push steshaw/scotty-example:${CIRCLE_SHA1}

      - run:
          name: Install Google Cloud Platform SDK
          command: |
            mkdir -p /opt
            curl -sS https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-153.0.0-linux-x86_64.tar.gz | tar -xzf - -C /opt
            gcloud components update
            gcloud components install kubectl

      - run:
          name: Configure Google Cloud Platform SDK
          command: |
            set -eu
            GCLOUD_COMPUTE_ZONE=us-central1-b
            GCLOUD_CLUSTER_NAME=k0
            GCLOUD_PROJECT=dev0-166300
            echo $GCLOUD_SERVICE_KEY | base64 --decode >~/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
            gcloud config set compute/zone $GCLOUD_COMPUTE_ZONE
            gcloud config set project $GCLOUD_PROJECT
            gcloud config set container/cluster $GCLOUD_CLUSTER_NAME
            gcloud container clusters get-credentials $GCLOUD_CLUSTER_NAME
            kubectl config current-context
            kubectl config get-contexts
            kubectl config get-clusters

      - deploy:
          name: Deploy to GKE
          command: |
            set -eu
            if [[ -z ${CIRCLE_BUILD_NUM} ]]; then
              # Deploy to development.

              # This is a local build using `circleci`.
              # Currently, the build won't even get this far because you can't
              # pass in environment variables (secrets) that are configured
              # in the CircleCI UI.
              namespace="dev-${CIRCLE_BRANCH}"
              k8s/apply-namespace ${namespace}
            elif [[ ${CIRCLE_BRANCH} != master ]]; then
              # Deploy to staging.
              namespace="staging-${CIRCLE_BRANCH}"
              k8s/apply-namespace ${namespace}
            else
              # Deploy to production.
              namespace='default'
            fi
            k8s/scotty-deployment ${namespace} steshaw/scotty-example:${CIRCLE_SHA1}
            kubectl --namespace=${namespace} apply -f k8s/
